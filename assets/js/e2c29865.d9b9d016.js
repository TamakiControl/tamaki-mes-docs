"use strict";(self.webpackChunktamaki_mes_docs=self.webpackChunktamaki_mes_docs||[]).push([[87389],{94726:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>n,default:()=>d,frontMatter:()=>c,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"perspective-project/css-styles/utility-classes/colors/customization/customization","title":"Customization","description":"Overview","source":"@site/docs/perspective-project/css-styles/utility-classes/colors/customization/customization.md","sourceDirName":"perspective-project/css-styles/utility-classes/colors/customization","slug":"/perspective-project/css-styles/utility-classes/colors/customization/","permalink":"/tamaki-mes-docs/docs/perspective-project/css-styles/utility-classes/colors/customization/","draft":false,"unlisted":false,"editUrl":"https://github.com/TamakiControl/tamaki-mes-docs/docs/perspective-project/css-styles/utility-classes/colors/customization/customization.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0,"sidebar_label":"Customization","title":"Customization"},"sidebar":"tutorialSidebar","previous":{"title":"Background Colors","permalink":"/tamaki-mes-docs/docs/perspective-project/css-styles/utility-classes/colors/background-color/"},"next":{"title":"Hover","permalink":"/tamaki-mes-docs/docs/perspective-project/css-styles/utility-classes/colors/hover/"}}');var i=t(74848),r=t(28453);const c={sidebar_position:0,sidebar_label:"Customization",title:"Customization"},n=void 0,a={},l=[{value:"Overview",id:"overview",level:2},{value:"On-the-Fly Color Customization",id:"on-the-fly-color-customization",level:2}];function u(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(s.p,{children:["All of our custom colors are defined as CSS variables in the ",(0,i.jsx)(s.code,{children:":root"})," selector of the custom stylesheet. This makes it easy to change the colors of the project by simply changing the value of the CSS variable. They are defined like this:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-css",children:":root {\n\t--color-primary: --primary-color: 49.12% 0.3096 275.75;\n\n\t...\n\n\t--primary: oklch(var(--color-primary));\n}\n"})}),"\n",(0,i.jsx)(s.h2,{id:"on-the-fly-color-customization",children:"On-the-Fly Color Customization"}),"\n",(0,i.jsx)(s.p,{children:"Because our colors are defined as oklch values, you can easily create custom darker or lighter shades of any color like this:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-css",children:"background: oklch(var(--color-primary) / 50%);\n"})}),"\n",(0,i.jsx)(s.p,{children:"which will create a 50% lighter shade of the primary color."})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>c,x:()=>n});var o=t(96540);const i={},r=o.createContext(i);function c(e){const s=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function n(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(r.Provider,{value:s},e.children)}}}]);