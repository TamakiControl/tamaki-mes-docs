"use strict";(self.webpackChunktamaki_mes_docs=self.webpackChunktamaki_mes_docs||[]).push([[9700],{7940:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"appendix/script-api/inventory-script-api/validate-merge-request","title":"validateMergeRequest","description":"Validates a merge request based on the provided parameters.","source":"@site/docs/appendix/script-api/inventory-script-api/validate-merge-request.md","sourceDirName":"appendix/script-api/inventory-script-api","slug":"/appendix/script-api/inventory-script-api/validate-merge-request","permalink":"/tamaki-mes-docs/docs/appendix/script-api/inventory-script-api/validate-merge-request","draft":false,"unlisted":false,"editUrl":"https://github.com/TamakiControl/tamaki-mes-docs/docs/appendix/script-api/inventory-script-api/validate-merge-request.md","tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20,"title":"validateMergeRequest","description":"Validates a merge request based on the provided parameters."},"sidebar":"tutorialSidebar","previous":{"title":"merge","permalink":"/tamaki-mes-docs/docs/appendix/script-api/inventory-script-api/merge"},"next":{"title":"newScrapRequest","permalink":"/tamaki-mes-docs/docs/appendix/script-api/inventory-script-api/new-scrap-request"}}');var n=r(4848),i=r(8453);const d={sidebar_position:20,title:"validateMergeRequest",description:"Validates a merge request based on the provided parameters."},a="system.mes.inventory.validateMergeRequest",o={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Code Examples",id:"code-examples",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"systemmesinventoryvalidatemergerequest",children:"system.mes.inventory.validateMergeRequest"})}),"\n",(0,n.jsx)(t.p,{children:"Validates a merge request based on the provided parameters."}),"\n",(0,n.jsx)(t.h2,{id:"syntax",children:"Syntax"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"system.mes.inventory.validateMergeRequest(**merge_request)\n"})}),"\n",(0,n.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Parameter"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"type"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"String"})}),(0,n.jsx)(t.td,{children:"The type of request defined by the LotRecordType Enum. It is internally set and must not be modified, as changes may break functionality."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"sourceLotId"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(t.td,{children:"The ID of the lot that will be merged and closed."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"destinationLotId"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(t.td,{children:"The ID of the final inventory lot that will be merged into."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"locationId"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(t.td,{children:"The ID of the location the merged inventory goes to."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"operationId"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(t.td,{children:"The ID of the operation merging this inventory."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"productionOrderIdOrName"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"String"})}),(0,n.jsx)(t.td,{children:"The ID or name of the production order associated with the merge."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"materialReasonCodeId"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(t.td,{children:"The ID of the material reason code to add additional context."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"notes"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"String"})}),(0,n.jsx)(t.td,{children:"Notes related to the merge request."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"spare1"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"String"})}),(0,n.jsx)(t.td,{children:"Additional field for user-defined context."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"spare2"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"String"})}),(0,n.jsx)(t.td,{children:"Additional field for user-defined context."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"spare3"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"String"})}),(0,n.jsx)(t.td,{children:"Additional field for user-defined context."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)(t.p,{children:"Returns a JSON object where keys are field names and values are lists of validation violation messages."}),"\n",(0,n.jsx)(t.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"# Generate the object structure for a new merge request object with no initial arguments\nmerge_request = system.mes.inventory.newMergeRequest()\n\n# Set basic attributes for the new merge request\nmerge_request['sourceLotId'] = '01JJD0ST06-APPRGRCY-25ZQ49FR'\nmerge_request['destinationLotId'] = '01JJCPQWYG-T9CW4G6Z-96XBWYQB'\n# (You can continue setting other properties as needed here)\n\n# Validate merge request parameters\nvalidation_errors = system.mes.inventory.validateMergeRequest(**merge_request)\n\nif len(validation_errors) > 0:\n    print('Validation errors found:', validation_errors)\nelse:\n    print('Merge request parameters are valid.')\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>d,x:()=>a});var s=r(6540);const n={},i=s.createContext(n);function d(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);