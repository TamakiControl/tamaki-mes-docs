"use strict";(self.webpackChunktamaki_mes_docs=self.webpackChunktamaki_mes_docs||[]).push([[4810],{83841:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>d,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"perspective-project/perspective-components/number-input","title":"Number Input","description":"Overview","source":"@site/docs/perspective-project/perspective-components/number-input.md","sourceDirName":"perspective-project/perspective-components","slug":"/perspective-project/perspective-components/number-input","permalink":"/tamaki-mes-docs/docs/perspective-project/perspective-components/number-input","draft":false,"unlisted":false,"editUrl":"https://github.com/TamakiControl/tamaki-mes-docs/docs/perspective-project/perspective-components/number-input.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Number Input","title":"Number Input"},"sidebar":"tutorialSidebar","previous":{"title":"Expression Editor","permalink":"/tamaki-mes-docs/docs/perspective-project/perspective-components/expression-editor"},"next":{"title":"Inventory TraceGraph","permalink":"/tamaki-mes-docs/docs/perspective-project/perspective-components/inventory-tracegraph"}}');var i=n(74848),r=n(28453);const d={sidebar_position:3,sidebar_label:"Number Input",title:"Number Input"},c=void 0,l={},o=[{value:"Overview",id:"overview",level:2},{value:"Props",id:"props",level:2},{value:"Notes",id:"notes",level:2}];function h(e){const t={code:"code",h2:"h2",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(t.p,{children:"The Number Input component is a custom Perspective component that provides an enhanced interface for entering and editing numeric values. It fixes a number of issues with the default Perspective Numeric Input component and includes additional features to improve the user experience."}),"\n",(0,i.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,i.jsx)(t.p,{children:"The Number Input component has the following props:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Prop Name"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"}),(0,i.jsx)(t.th,{children:"Input/Output"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"value"})}),(0,i.jsx)(t.td,{children:"number"}),(0,i.jsx)(t.td,{children:"The current value."}),(0,i.jsx)(t.td,{children:"Both"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"allowNegative"})}),(0,i.jsx)(t.td,{children:"boolean"}),(0,i.jsx)(t.td,{children:"If true, allows negative values."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"allowLeadingZeros"})}),(0,i.jsx)(t.td,{children:"boolean"}),(0,i.jsx)(t.td,{children:"If true, allows leading zeros."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"decimalScale"})}),(0,i.jsx)(t.td,{children:"number"}),(0,i.jsx)(t.td,{children:"The number of decimal places to allow. If set to 0, only integers are allowed."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"fixedDecimalScale"})}),(0,i.jsx)(t.td,{children:"boolean"}),(0,i.jsxs)(t.td,{children:["If true, always shows the number of decimal places specified by ",(0,i.jsx)(t.code,{children:"decimalScale"}),", even while editing."]}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"thousandSeparator"})}),(0,i.jsx)(t.td,{children:"boolean"}),(0,i.jsx)(t.td,{children:"If true, shows a thousands separator."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"prefix"})}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"A string to prefix the value with."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"suffix"})}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"A string to suffix the value with."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"placeholder"})}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"The placeholder text to show when the input is empty."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"enabled"})}),(0,i.jsx)(t.td,{children:"boolean"}),(0,i.jsx)(t.td,{children:"If false, the input is disabled and cannot be interacted with."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"readonly"})}),(0,i.jsx)(t.td,{children:"boolean"}),(0,i.jsx)(t.td,{children:"If true, the input is read-only and cannot be edited."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"align"})}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:'The alignment of the text in the input. Can be "left", "center", or "right". Default is "left".'}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"inputBounds"})}),(0,i.jsx)(t.td,{children:"object"}),(0,i.jsxs)(t.td,{children:["An object specifying the minimum and maximum values allowed. E.g. ",(0,i.jsx)(t.code,{children:"{ min: 0, max: 100 }"}),"."]}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"isOutOfBounds"})}),(0,i.jsx)(t.td,{children:"boolean"}),(0,i.jsx)(t.td,{children:"Indicates whether the current value is out of the specified bounds."}),(0,i.jsx)(t.td,{children:"Output"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"allowOutOfBounds"})}),(0,i.jsx)(t.td,{children:"boolean"}),(0,i.jsx)(t.td,{children:"If true, allows values outside of the specified bounds."}),(0,i.jsx)(t.td,{children:"Input"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"notes",children:"Notes"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The Number Input is designed to be used in conjunction with the ",(0,i.jsx)(t.code,{children:"TamakiMES/_components/NumberInput"})," Perspective View, which provides a complete interface for editing numbers, including a label, description, and error messages."]}),"\n",(0,i.jsxs)(t.li,{children:["List of known bugs with the default Perspective Numeric Input component that are fixed by this component:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:'Does not have "inputmode" attribute set to "numeric", which results in incorrect virtual keyboards on mobile devices/tablets'}),"\n",(0,i.jsx)(t.li,{children:"Implements unconventional method to grab focus, causing an incompatibility with the Expression Editor and any other component that tracks its focus state internally"}),"\n",(0,i.jsxs)(t.li,{children:["Does not handle integers correctly. If you set the format to Integer ('0,0'), then type in a float (e.g. '1.23') and press enter it will change the display to show just '1' but the actual value will still be '1.23'","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Display value rounds instead of truncates, a value of '2.9' in Integer format will result in a display value of '3'"}),"\n",(0,i.jsx)(t.li,{children:"It allows you to type in a decimal when in Integer mode"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:"Captures scroll input on certain browsers/OSes even when the component does not have focus, causing the value to change unexpectedly"}),"\n",(0,i.jsx)(t.li,{children:"No way to have a fixed number of decimal places, e.g. always show 2 decimal places even while editing"}),"\n",(0,i.jsx)(t.li,{children:"No way to have a prefix or suffix on the number, e.g. a currency symbol"}),"\n"]}),"\n"]}),"\n"]})]})}function a(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>c});var s=n(96540);const i={},r=s.createContext(i);function d(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);