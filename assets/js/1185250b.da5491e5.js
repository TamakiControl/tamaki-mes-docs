"use strict";(self.webpackChunktamaki_mes_docs=self.webpackChunktamaki_mes_docs||[]).push([[3513],{45214:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>s,metadata:()=>d,toc:()=>o});const d=JSON.parse('{"id":"appendix/script-api/inventory-script-api/scrap-all","title":"scrapAll","description":"Scraps all inventory of a specific material at a location from the MES based on the provided parameters.","source":"@site/docs/appendix/script-api/inventory-script-api/scrap-all.md","sourceDirName":"appendix/script-api/inventory-script-api","slug":"/appendix/script-api/inventory-script-api/scrap-all","permalink":"/tamaki-mes-docs/docs/appendix/script-api/inventory-script-api/scrap-all","draft":false,"unlisted":false,"editUrl":"https://github.com/TamakiControl/tamaki-mes-docs/docs/appendix/script-api/inventory-script-api/scrap-all.md","tags":[],"version":"current","sidebarPosition":23,"frontMatter":{"sidebar_position":23,"title":"scrapAll","description":"Scraps all inventory of a specific material at a location from the MES based on the provided parameters."},"sidebar":"tutorialSidebar","previous":{"title":"scrap","permalink":"/tamaki-mes-docs/docs/appendix/script-api/inventory-script-api/scrap"},"next":{"title":"validateScrapRequest","permalink":"/tamaki-mes-docs/docs/appendix/script-api/inventory-script-api/validate-scrap-request"}}');var n=t(74848),i=t(28453);const s={sidebar_position:23,title:"scrapAll",description:"Scraps all inventory of a specific material at a location from the MES based on the provided parameters."},c="system.mes.inventory.scrapAll",l={},o=[{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Code Examples",id:"code-examples",level:2}];function h(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"systemmesinventoryscrapall",children:"system.mes.inventory.scrapAll"})}),"\n",(0,n.jsx)(r.p,{children:"Scraps all inventory of a specific material at a location from the MES based on the provided parameters. If no material is specified, it will scrap all inventory at the location."}),"\n",(0,n.jsx)(r.h2,{id:"syntax",children:"Syntax"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"system.mes.inventory.scrapAll(**scrap_all_request)\n"})}),"\n",(0,n.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Parameter"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Nullable"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"type"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"True"}),(0,n.jsx)(r.td,{children:"The type of request defined by the LotRecordType Enum. It is internally set to SCRAP and must not be modified."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"sourceLocationIdOrPath"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"False"}),(0,n.jsx)(r.td,{children:"The ID or path of the location from which inventory will be scrapped. Required."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"materialIdOrPath"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"True"}),(0,n.jsx)(r.td,{children:"The ID or path of the material being scrapped. Optional - if omitted, all materials at the location will be scrapped."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"operationId"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(r.td,{children:"True"}),(0,n.jsx)(r.td,{children:"The ID of the operation scrapping this inventory."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"inventoryOperationId"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(r.td,{children:"True"}),(0,n.jsx)(r.td,{children:"The ID of the inventory operation related to this scrap action."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"productionOrderIdOrName"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"True"}),(0,n.jsx)(r.td,{children:"The ID or name of the production order associated with the scrap."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"materialReasonCodeId"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(r.td,{children:"True"}),(0,n.jsx)(r.td,{children:"The ID of the material reason code to add additional context."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"startDate"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"Instant"})}),(0,n.jsx)(r.td,{children:"False"}),(0,n.jsxs)(r.td,{children:["The start date and time of the scrap. Default value is ",(0,n.jsx)(r.code,{children:"Current Instant"}),"."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"endDate"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"Instant"})}),(0,n.jsx)(r.td,{children:"True"}),(0,n.jsx)(r.td,{children:"The end date and time of the scrap."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"notes"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"True"}),(0,n.jsx)(r.td,{children:"Notes related to the scrap all request."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"spare1"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"True"}),(0,n.jsx)(r.td,{children:"Additional field for user-defined context."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"spare2"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"True"}),(0,n.jsx)(r.td,{children:"Additional field for user-defined context."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"spare3"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"True"}),(0,n.jsx)(r.td,{children:"Additional field for user-defined context."})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)(r.p,{children:"Returns a list of JSON representation of each inventory lot records created for this scrap all action."}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Name"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"lotRecordType"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"The type of change for the record."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"inventoryLotId"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(r.td,{children:"The ULID of the primary inventory lot for the inventory lot record."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"inventoryLotName"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"The name of the primary inventory lot for the inventory lot record."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"secondaryInventoryLotId"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(r.td,{children:"The ULID of the secondary inventory lot for the inventory lot record."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"secondaryInventoryLotName"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"The name of the secondary inventory lot for the inventory lot record."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"operationRecordId"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(r.td,{children:"The ULID of the operation record for the inventory lot record."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"inventoryOperationId"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(r.td,{children:"The ULID of the inventory operation for the inventory lot record."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"productionOrderId"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(r.td,{children:"The ULID of the production order for the inventory lot record."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"materialReasonCodeId"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(r.td,{children:"The ULID of the material reason code for the inventory lot record."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"sourceLocationId"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(r.td,{children:"The source location of the inventory or lot being operated."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"destinationLocationId"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(r.td,{children:"The destination location of the inventory or lot being operated."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"lotStatus"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"The status of the inventory lot."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"quantity"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"Double"})}),(0,n.jsx)(r.td,{children:"The quantity of units being changed depending on the lotRecordType."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"startDate"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"Instant"})}),(0,n.jsx)(r.td,{children:"The beginning timestamp of the inventory lot change."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"endDate"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"Instant"})}),(0,n.jsx)(r.td,{children:"The end timestamp of the inventory lot change."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"status"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"The status of the inventory lot record (e.g. Running, Completed, Faulted)."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"id"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"String"})," (ULID)"]}),(0,n.jsx)(r.td,{children:"The ULID of the inventory lot record (optional, used for updating an existing inventory lot record)."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"notes"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"Notes related to the inventory lot."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"enabled"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"Boolean"})}),(0,n.jsx)(r.td,{children:"Indicates if the inventory lot is active and enabled."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"spare1"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"Additional field for user-defined context."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"spare2"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"Additional field for user-defined context."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"spare3"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"String"})}),(0,n.jsx)(r.td,{children:"Additional field for user-defined context."})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"# Generate the object structure for a new scrap all request\nnew_request = system.mes.inventory.newScrapAllRequest()\n\n# Set basic attributes for the new scrap all request\nnew_request['materialIdOrPath'] = 'Bottle/Milk'\nnew_request['sourceLocationIdOrPath'] = 'DairyCo'\n\n# Scrap all inventory at the specified location that matches the material (if specified)\nscrapped_records = system.mes.inventory.scrapAll(**new_request)\n\n# Output the JSON representation of the scrapped records\nprint(scrapped_records)\n"})})]})}function a(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>c});var d=t(96540);const n={},i=d.createContext(n);function s(e){const r=d.useContext(i);return d.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),d.createElement(i.Provider,{value:r},e.children)}}}]);