"use strict";(self.webpackChunktamaki_mes_docs=self.webpackChunktamaki_mes_docs||[]).push([[31400],{65027:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>n,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"perspective-project/css-styles/utility-classes/utility-classes","title":"Utility Classes","description":"Overview","source":"@site/docs/perspective-project/css-styles/utility-classes/utility-classes.md","sourceDirName":"perspective-project/css-styles/utility-classes","slug":"/perspective-project/css-styles/utility-classes/","permalink":"/tamaki-mes-docs/docs/perspective-project/css-styles/utility-classes/","draft":false,"unlisted":false,"editUrl":"https://github.com/TamakiControl/tamaki-mes-docs/docs/perspective-project/css-styles/utility-classes/utility-classes.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0,"sidebar_label":"Utility Classes","title":"Utility Classes"},"sidebar":"tutorialSidebar","previous":{"title":"CSS Styles","permalink":"/tamaki-mes-docs/docs/perspective-project/css-styles/"},"next":{"title":"Colors","permalink":"/tamaki-mes-docs/docs/perspective-project/css-styles/utility-classes/colors/"}}');var c=t(74848),o=t(28453);const l={sidebar_position:0,sidebar_label:"Utility Classes",title:"Utility Classes"},n=void 0,a={},r=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Editing the Utility Classes",id:"editing-the-utility-classes",level:2}];function d(e){const s={code:"code",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,c.jsx)(s.p,{children:"As a part of the Perspective project, we have created a collection of utility classes that can be used to style components and screens in a very fast and consistent way."}),"\n",(0,c.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,c.jsxs)(s.p,{children:["To use the utility classes, simply add the desired class to the ",(0,c.jsx)(s.code,{children:"style.classes"})," property of the component you want to style. For example, to add a border to a component, you can add the ",(0,c.jsx)(s.code,{children:"border"})," class to the ",(0,c.jsx)(s.code,{children:"style.classes"})," property."]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-json",children:'{\n\t"style.classes": "border"\n}\n'})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.img,{alt:"style classes",src:t(98902).A+"",width:"358",height:"92"})}),"\n",(0,c.jsx)(s.h2,{id:"editing-the-utility-classes",children:"Editing the Utility Classes"}),"\n",(0,c.jsxs)(s.p,{children:["The utility classes are defined in the second half of the custom stylesheet. To edit them, simply open the stylesheet in the Designer and scroll down to the ",(0,c.jsx)(s.code,{children:"Utility Classes"})," section. The classes are organized into sections similar to this documentation page, so you can easily find the class you want to edit."]}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"Important"}),": In the stylesheet, all custom classes to be used in perspective must start with the ",(0,c.jsx)(s.code,{children:"psc"})," prefix. This is to avoid conflicts with any default classes that may be added in future versions of Perspective. However, the ",(0,c.jsx)(s.code,{children:"psc"})," prefix is not required when adding the class to the ",(0,c.jsx)(s.code,{children:"style.classes"})," property of a component."]}),"\n",(0,c.jsx)(s.p,{children:"If you make changes to the stylesheet, you will need to save the stylesheet and refresh the Designer (or close/reopen each view) to see the changes take effect."})]})}function p(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,c.jsx)(s,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},98902:(e,s,t)=>{t.d(s,{A:()=>i});const i=t.p+"assets/images/style-classes-b03ffdea950632e8fdd784480c6c014d.png"},28453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>n});var i=t(96540);const c={},o=i.createContext(c);function l(e){const s=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function n(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),i.createElement(o.Provider,{value:s},e.children)}}}]);