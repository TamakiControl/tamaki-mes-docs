"use strict";(self.webpackChunktamaki_mes_docs=self.webpackChunktamaki_mes_docs||[]).push([[25509],{96495:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>a,frontMatter:()=>d,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"perspective-project/perspective-components/material-tree","title":"Material Tree","description":"Overview","source":"@site/docs/perspective-project/perspective-components/material-tree.md","sourceDirName":"perspective-project/perspective-components","slug":"/perspective-project/perspective-components/material-tree","permalink":"/tamaki-mes-docs/docs/perspective-project/perspective-components/material-tree","draft":false,"unlisted":false,"editUrl":"https://github.com/TamakiControl/tamaki-mes-docs/docs/perspective-project/perspective-components/material-tree.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"sidebar_label":"Material Tree","title":"Material Tree"},"sidebar":"tutorialSidebar","previous":{"title":"Location Tree","permalink":"/tamaki-mes-docs/docs/perspective-project/perspective-components/location-tree"},"next":{"title":"Unit of Measure Tree","permalink":"/tamaki-mes-docs/docs/perspective-project/perspective-components/uom-tree"}}');var i=r(74848),n=r(28453);const d={sidebar_position:7,sidebar_label:"Material Tree",title:"Material Tree"},c=void 0,o={},l=[{value:"Overview",id:"overview",level:2},{value:"Props",id:"props",level:2},{value:"Events",id:"events",level:2}];function h(e){const t={code:"code",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(t.p,{children:"The Material Tree component is a custom Perspective component that provides a hierarchical tree view of materials and material classes. It allows users to easily navigate and select materials from a structured list."}),"\n",(0,i.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,i.jsx)(t.p,{children:"The Material Tree component has the following props:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Prop Name"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"}),(0,i.jsx)(t.th,{children:"Input/Output"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"showSearch"})}),(0,i.jsx)(t.td,{children:"boolean"}),(0,i.jsx)(t.td,{children:"If true, shows a search box at the top of the tree to filter materials."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"selectedItem"})}),(0,i.jsx)(t.td,{children:"object"}),(0,i.jsxs)(t.td,{children:["The currently selected item in the tree. Contains the properties ",(0,i.jsx)(t.code,{children:"id"})," (string), ",(0,i.jsx)(t.code,{children:"notes"})," (string), ",(0,i.jsx)(t.code,{children:"description"})," (string), ",(0,i.jsx)(t.code,{children:"type"})," (string), ",(0,i.jsx)(t.code,{children:"parentId"})," (string), ",(0,i.jsx)(t.code,{children:"enabled"})," (boolean), ",(0,i.jsx)(t.code,{children:"path"})," (string), ",(0,i.jsx)(t.code,{children:"name"})," (string), ",(0,i.jsx)(t.code,{children:"spare1"})," (string), ",(0,i.jsx)(t.code,{children:"spare2"})," (string), ",(0,i.jsx)(t.code,{children:"spare3"})," (string)"]}),(0,i.jsx)(t.td,{children:"Output"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"currentItemId"})}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"The ID of the item most recently clicked on. This is useful for tracking user interaction with the tree."}),(0,i.jsx)(t.td,{children:"Output"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"forceRefresh"})}),(0,i.jsx)(t.td,{children:"boolean"}),(0,i.jsx)(t.td,{children:"If true, forces the tree to refresh its data from the server. Automatically resets to false after 500ms."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"allowEdit"})}),(0,i.jsx)(t.td,{children:"boolean"}),(0,i.jsx)(t.td,{children:"If true, allows the user to edit the tree (add, edit, delete, cut, paste, etc.)."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"rootPath"})}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"If set, only shows materials that are descendants of the specified material path."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"hideItems"})}),(0,i.jsx)(t.td,{children:"array[string]"}),(0,i.jsx)(t.td,{children:"An array of material/material class IDs to hide from the tree. Also hides their children."}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"showImport"})}),(0,i.jsx)(t.td,{children:"boolean"}),(0,i.jsx)(t.td,{children:'If true, shows an "Import" button to allow importing materials from a CSV or JSON file.'}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"showExport"})}),(0,i.jsx)(t.td,{children:"boolean"}),(0,i.jsx)(t.td,{children:'If true, shows an "Export" button in the context menu to allow exporting materials to a CSV or JSON file.'}),(0,i.jsx)(t.td,{children:"Input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"importTooltip"})}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:'The tooltip text to show when hovering over the "Import" button.'}),(0,i.jsx)(t.td,{children:"Input"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"events",children:"Events"}),"\n",(0,i.jsx)(t.p,{children:"The Material Tree component emits the following events:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Event Name"}),(0,i.jsx)(t.th,{children:"Description"}),(0,i.jsx)(t.th,{children:"Payload"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"onAdd"})}),(0,i.jsx)(t.td,{children:"Emitted when the user adds a new material."}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"{ currentItemId: string, type: string ('material' or 'materialClass') }"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"onDelete"})}),(0,i.jsx)(t.td,{children:"Emitted when the user deletes a material."}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"{ currentItemId: string }"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"onImport"})}),(0,i.jsx)(t.td,{children:"Emitted when the user imports materials."}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"None"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"onExport"})}),(0,i.jsx)(t.td,{children:"Emitted when the user exports materials."}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"{ currentItemId: string}"})})]})]})]})]})}function a(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>d,x:()=>c});var s=r(96540);const i={},n=s.createContext(i);function d(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);