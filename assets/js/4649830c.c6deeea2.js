"use strict";(self.webpackChunktamaki_mes_docs=self.webpackChunktamaki_mes_docs||[]).push([[46232],{36263:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>n,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"appendix/script-api/dashboard-script-api/intro","title":"Introduction to Dashboard API","description":"Overview of functions available in the Dashboard API.","source":"@site/docs/appendix/script-api/dashboard-script-api/intro.md","sourceDirName":"appendix/script-api/dashboard-script-api","slug":"/appendix/script-api/dashboard-script-api/intro","permalink":"/tamaki-mes-docs/docs/appendix/script-api/dashboard-script-api/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/TamakiControl/tamaki-mes-docs/docs/appendix/script-api/dashboard-script-api/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Introduction to Dashboard API","description":"Overview of functions available in the Dashboard API."},"sidebar":"tutorialSidebar","previous":{"title":"findCustomers","permalink":"/tamaki-mes-docs/docs/appendix/script-api/customer-script-api/find-customers"},"next":{"title":"newParameterType","permalink":"/tamaki-mes-docs/docs/appendix/script-api/dashboard-script-api/new-parameter-type"}}');var d=t(74848),s=t(28453);const i={sidebar_position:1,title:"Introduction to Dashboard API",description:"Overview of functions available in the Dashboard API."},n="Dashboard API",o={},l=[{value:"Function List",id:"function-list",level:2},{value:"<code>newParameterType</code>",id:"newparametertype",level:3},{value:"<code>getParameterType</code>",id:"getparametertype",level:3},{value:"<code>getParameterTypeByName</code>",id:"getparametertypebyname",level:3},{value:"<code>getParameterTypes</code>",id:"getparametertypes",level:3},{value:"<code>saveParameterType</code>",id:"saveparametertype",level:3},{value:"<code>validateParameterType</code>",id:"validateparametertype",level:3},{value:"<code>deleteParameterType</code>",id:"deleteparametertype",level:3},{value:"<code>newWidget</code>",id:"newwidget",level:3},{value:"<code>getWidget</code>",id:"getwidget",level:3},{value:"<code>getWidgetByName</code>",id:"getwidgetbyname",level:3},{value:"<code>getWidgets</code>",id:"getwidgets",level:3},{value:"<code>getAllWidgetNames</code>",id:"getallwidgetnames",level:3},{value:"<code>saveWidget</code>",id:"savewidget",level:3},{value:"<code>saveWidgetAndParameters</code>",id:"savewidgetandparameters",level:3},{value:"<code>validateWidget</code>",id:"validatewidget",level:3},{value:"<code>saveWidgets</code>",id:"savewidgets",level:3},{value:"<code>deleteWidget</code>",id:"deletewidget",level:3},{value:"<code>getWidgetParameters</code>",id:"getwidgetparameters",level:3},{value:"<code>newWidgetParameter</code>",id:"newwidgetparameter",level:3},{value:"<code>getWidgetParameter</code>",id:"getwidgetparameter",level:3},{value:"<code>saveWidgetParameter</code>",id:"savewidgetparameter",level:3},{value:"<code>validateWidgetParameter</code>",id:"validatewidgetparameter",level:3},{value:"<code>deleteWidgetParameter</code>",id:"deletewidgetparameter",level:3},{value:"<code>newDashboard</code>",id:"newdashboard",level:3},{value:"<code>getDashboard</code>",id:"getdashboard",level:3},{value:"<code>getDashboardByUrl</code>",id:"getdashboardbyurl",level:3},{value:"<code>getDashboardsForCurrentUser</code>",id:"getdashboardsforcurrentuser",level:3},{value:"<code>saveDashboard</code>",id:"savedashboard",level:3},{value:"<code>validateDashboard</code>",id:"validatedashboard",level:3},{value:"<code>deleteDashboard</code>",id:"deletedashboard",level:3},{value:"<code>isUrlUnique</code>",id:"isurlunique",level:3},{value:"<code>exportWidgetsAsJson</code>",id:"exportwidgetsasjson",level:3},{value:"<code>exportWidgetsAsCsv</code>",id:"exportwidgetsascsv",level:3},{value:"<code>importFromCsv</code>",id:"importfromcsv",level:3},{value:"<code>importFromJson</code>",id:"importfromjson",level:3}];function h(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(a.header,{children:(0,d.jsx)(a.h1,{id:"dashboard-api",children:"Dashboard API"})}),"\n",(0,d.jsx)(a.p,{children:"Welcome to the Dashboard API documentation. This API provides a comprehensive set of functions for managing dashboards, reusable widgets, parameter types, and bulk import/export of widgets. Below is a list of available functions, each with a brief description and a link to its detailed documentation."}),"\n",(0,d.jsx)(a.h2,{id:"function-list",children:"Function List"}),"\n",(0,d.jsx)(a.h3,{id:"newparametertype",children:(0,d.jsx)(a.a,{href:"./new-parameter-type",children:(0,d.jsx)(a.code,{children:"newParameterType"})})}),"\n",(0,d.jsxs)(a.p,{children:["Generates an empty non-persisted Dashboard Widget Parameter Type to provide the structure required by the API to save a new record into the database. This method must be combined with the ",(0,d.jsx)(a.a,{href:"./save-parameter-type",children:"saveParameterType"})," method in order to persist the record. Returns a JSON representation of the newly created parameter type object."]}),"\n",(0,d.jsx)(a.h3,{id:"getparametertype",children:(0,d.jsx)(a.a,{href:"./get-parameter-type",children:(0,d.jsx)(a.code,{children:"getParameterType"})})}),"\n",(0,d.jsx)(a.p,{children:"Retrieves a Dashboard Widget Parameter Type by its ID. Returns a JSON representation of the parameter type."}),"\n",(0,d.jsx)(a.h3,{id:"getparametertypebyname",children:(0,d.jsx)(a.a,{href:"./get-parameter-type-by-name",children:(0,d.jsx)(a.code,{children:"getParameterTypeByName"})})}),"\n",(0,d.jsx)(a.p,{children:"Retrieves a Dashboard Widget Parameter Type by its unique name. Returns a JSON representation of the parameter type."}),"\n",(0,d.jsx)(a.h3,{id:"getparametertypes",children:(0,d.jsx)(a.a,{href:"./get-parameter-types",children:(0,d.jsx)(a.code,{children:"getParameterTypes"})})}),"\n",(0,d.jsx)(a.p,{children:"Retrieves a list of all Dashboard Widget Parameter Types. Returns a list of JSON objects representing parameter types."}),"\n",(0,d.jsx)(a.h3,{id:"saveparametertype",children:(0,d.jsx)(a.a,{href:"./save-parameter-type",children:(0,d.jsx)(a.code,{children:"saveParameterType"})})}),"\n",(0,d.jsx)(a.p,{children:"Creates or updates a Dashboard Widget Parameter Type in the system based on the provided parameters. Returns a JSON representation of the saved parameter type."}),"\n",(0,d.jsx)(a.h3,{id:"validateparametertype",children:(0,d.jsx)(a.a,{href:"./validate-parameter-type",children:(0,d.jsx)(a.code,{children:"validateParameterType"})})}),"\n",(0,d.jsx)(a.p,{children:"Validates the specified parameters for a Dashboard Widget Parameter Type and returns any validation errors. This only checks if the object can be saved based on the attributes given. Returns a JSON object where keys are field names and values are lists of validation violation messages."}),"\n",(0,d.jsx)(a.h3,{id:"deleteparametertype",children:(0,d.jsx)(a.a,{href:"./delete-parameter-type",children:(0,d.jsx)(a.code,{children:"deleteParameterType"})})}),"\n",(0,d.jsx)(a.p,{children:"Deletes a Dashboard Widget Parameter Type by its ID. If successful, an ApiResponse Object is returned with the success bool set True."}),"\n",(0,d.jsx)(a.h3,{id:"newwidget",children:(0,d.jsx)(a.a,{href:"./new-widget",children:(0,d.jsx)(a.code,{children:"newWidget"})})}),"\n",(0,d.jsxs)(a.p,{children:["Generates an empty non-persisted Dashboard Widget to provide the structure required by the API to save a new record into the database. This method must be combined with the ",(0,d.jsx)(a.a,{href:"./save-widget",children:"saveWidget"})," method in order to persist the record. Returns a JSON representation of the newly created widget object."]}),"\n",(0,d.jsx)(a.h3,{id:"getwidget",children:(0,d.jsx)(a.a,{href:"./get-widget",children:(0,d.jsx)(a.code,{children:"getWidget"})})}),"\n",(0,d.jsx)(a.p,{children:"Retrieves a Dashboard Widget by its ID. Returns a JSON representation of the widget."}),"\n",(0,d.jsx)(a.h3,{id:"getwidgetbyname",children:(0,d.jsx)(a.a,{href:"./get-widget-by-name",children:(0,d.jsx)(a.code,{children:"getWidgetByName"})})}),"\n",(0,d.jsx)(a.p,{children:"Retrieves a Dashboard Widget by its unique name. Returns a JSON representation of the widget."}),"\n",(0,d.jsx)(a.h3,{id:"getwidgets",children:(0,d.jsx)(a.a,{href:"./get-widgets",children:(0,d.jsx)(a.code,{children:"getWidgets"})})}),"\n",(0,d.jsx)(a.p,{children:"Retrieves a list of all Dashboard Widgets. Returns a list of JSON objects representing widgets."}),"\n",(0,d.jsx)(a.h3,{id:"getallwidgetnames",children:(0,d.jsx)(a.a,{href:"./get-all-widget-names",children:(0,d.jsx)(a.code,{children:"getAllWidgetNames"})})}),"\n",(0,d.jsx)(a.p,{children:"Retrieves the names of all registered Dashboard Widgets. Returns a list of Strings."}),"\n",(0,d.jsx)(a.h3,{id:"savewidget",children:(0,d.jsx)(a.a,{href:"./save-widget",children:(0,d.jsx)(a.code,{children:"saveWidget"})})}),"\n",(0,d.jsx)(a.p,{children:"Creates or updates a Dashboard Widget in the system based on the provided parameters. Returns a JSON representation of the saved widget."}),"\n",(0,d.jsx)(a.h3,{id:"savewidgetandparameters",children:(0,d.jsx)(a.a,{href:"./save-widget-and-parameters",children:(0,d.jsx)(a.code,{children:"saveWidgetAndParameters"})})}),"\n",(0,d.jsx)(a.p,{children:"Saves a Dashboard Widget and its parameters in one call. Parameters provided are saved or updated; any existing parameters not in the list are removed. Returns a JSON representation of the saved widget."}),"\n",(0,d.jsx)(a.h3,{id:"validatewidget",children:(0,d.jsx)(a.a,{href:"./validate-widget",children:(0,d.jsx)(a.code,{children:"validateWidget"})})}),"\n",(0,d.jsx)(a.p,{children:"Validates the specified parameters for a Dashboard Widget and returns any validation errors. This only checks if the object can be saved based on the attributes given. Returns a JSON object where keys are field names and values are lists of validation violation messages."}),"\n",(0,d.jsx)(a.h3,{id:"savewidgets",children:(0,d.jsx)(a.a,{href:"./save-widgets",children:(0,d.jsx)(a.code,{children:"saveWidgets"})})}),"\n",(0,d.jsx)(a.p,{children:"Saves a list of Dashboard Widgets in bulk (useful for gateway startup). Returns a list of JSON objects representing the saved widgets."}),"\n",(0,d.jsx)(a.h3,{id:"deletewidget",children:(0,d.jsx)(a.a,{href:"./delete-widget",children:(0,d.jsx)(a.code,{children:"deleteWidget"})})}),"\n",(0,d.jsx)(a.p,{children:"Deletes a Dashboard Widget by its ID. If successful, an ApiResponse Object is returned with the success bool set True."}),"\n",(0,d.jsx)(a.h3,{id:"getwidgetparameters",children:(0,d.jsx)(a.a,{href:"./get-widget-parameters",children:(0,d.jsx)(a.code,{children:"getWidgetParameters"})})}),"\n",(0,d.jsx)(a.p,{children:"Retrieves all parameters for a specific Dashboard Widget. Returns a list of JSON objects representing widget parameters."}),"\n",(0,d.jsx)(a.h3,{id:"newwidgetparameter",children:(0,d.jsx)(a.a,{href:"./new-widget-parameter",children:(0,d.jsx)(a.code,{children:"newWidgetParameter"})})}),"\n",(0,d.jsxs)(a.p,{children:["Generates an empty non-persisted Dashboard Widget Parameter to provide the structure required by the API to save a new record into the database. This method must be combined with the ",(0,d.jsx)(a.a,{href:"./save-widget-parameter",children:"saveWidgetParameter"})," method in order to persist the record. Returns a JSON representation of the newly created widget parameter object."]}),"\n",(0,d.jsx)(a.h3,{id:"getwidgetparameter",children:(0,d.jsx)(a.a,{href:"./get-widget-parameter",children:(0,d.jsx)(a.code,{children:"getWidgetParameter"})})}),"\n",(0,d.jsx)(a.p,{children:"Retrieves a Dashboard Widget Parameter by its ID. Returns a JSON representation of the widget parameter."}),"\n",(0,d.jsx)(a.h3,{id:"savewidgetparameter",children:(0,d.jsx)(a.a,{href:"./save-widget-parameter",children:(0,d.jsx)(a.code,{children:"saveWidgetParameter"})})}),"\n",(0,d.jsx)(a.p,{children:"Creates or updates a Dashboard Widget Parameter in the system based on the provided parameters. Returns a JSON representation of the saved widget parameter."}),"\n",(0,d.jsx)(a.h3,{id:"validatewidgetparameter",children:(0,d.jsx)(a.a,{href:"./validate-widget-parameter",children:(0,d.jsx)(a.code,{children:"validateWidgetParameter"})})}),"\n",(0,d.jsx)(a.p,{children:"Validates the specified parameters for a Dashboard Widget Parameter and returns any validation errors. This only checks if the object can be saved based on the attributes given. Returns a JSON object where keys are field names and values are lists of validation violation messages."}),"\n",(0,d.jsx)(a.h3,{id:"deletewidgetparameter",children:(0,d.jsx)(a.a,{href:"./delete-widget-parameter",children:(0,d.jsx)(a.code,{children:"deleteWidgetParameter"})})}),"\n",(0,d.jsx)(a.p,{children:"Deletes a Dashboard Widget Parameter by its ID. If successful, an ApiResponse Object is returned with the success bool set True."}),"\n",(0,d.jsx)(a.h3,{id:"newdashboard",children:(0,d.jsx)(a.a,{href:"./new-dashboard",children:(0,d.jsx)(a.code,{children:"newDashboard"})})}),"\n",(0,d.jsxs)(a.p,{children:["Generates an empty non-persisted Dashboard to provide the structure required by the API to save a new record into the database. This method must be combined with the ",(0,d.jsx)(a.a,{href:"./save-dashboard",children:"saveDashboard"})," method in order to persist the record. Returns a JSON representation of the newly created dashboard object."]}),"\n",(0,d.jsx)(a.h3,{id:"getdashboard",children:(0,d.jsx)(a.a,{href:"./get-dashboard",children:(0,d.jsx)(a.code,{children:"getDashboard"})})}),"\n",(0,d.jsx)(a.p,{children:"Retrieves a Dashboard by its ID. Returns a JSON representation of the dashboard."}),"\n",(0,d.jsx)(a.h3,{id:"getdashboardbyurl",children:(0,d.jsx)(a.a,{href:"./get-dashboard-by-url",children:(0,d.jsx)(a.code,{children:"getDashboardByUrl"})})}),"\n",(0,d.jsx)(a.p,{children:"Retrieves a Dashboard by its URL for the current authenticated user (public dashboards are also considered). Returns a JSON representation of the dashboard."}),"\n",(0,d.jsx)(a.h3,{id:"getdashboardsforcurrentuser",children:(0,d.jsx)(a.a,{href:"./get-dashboards-for-current-user",children:(0,d.jsx)(a.code,{children:"getDashboardsForCurrentUser"})})}),"\n",(0,d.jsx)(a.p,{children:"Retrieves all dashboards owned by the current authenticated user, plus all public dashboards. Returns a list of JSON objects representing dashboards."}),"\n",(0,d.jsx)(a.h3,{id:"savedashboard",children:(0,d.jsx)(a.a,{href:"./save-dashboard",children:(0,d.jsx)(a.code,{children:"saveDashboard"})})}),"\n",(0,d.jsx)(a.p,{children:"Creates or updates a Dashboard in the system based on the provided parameters. Returns a JSON representation of the saved dashboard."}),"\n",(0,d.jsx)(a.h3,{id:"validatedashboard",children:(0,d.jsx)(a.a,{href:"./validate-dashboard",children:(0,d.jsx)(a.code,{children:"validateDashboard"})})}),"\n",(0,d.jsx)(a.p,{children:"Validates the specified parameters for a Dashboard and returns any validation errors. This only checks if the object can be saved based on the attributes given. Returns a JSON object where keys are field names and values are lists of validation violation messages."}),"\n",(0,d.jsx)(a.h3,{id:"deletedashboard",children:(0,d.jsx)(a.a,{href:"./delete-dashboard",children:(0,d.jsx)(a.code,{children:"deleteDashboard"})})}),"\n",(0,d.jsx)(a.p,{children:"Deletes a Dashboard by its ID. If successful, an ApiResponse Object is returned with the success bool set True."}),"\n",(0,d.jsx)(a.h3,{id:"isurlunique",children:(0,d.jsx)(a.a,{href:"./is-url-unique",children:(0,d.jsx)(a.code,{children:"isUrlUnique"})})}),"\n",(0,d.jsxs)(a.p,{children:["Checks whether a dashboard URL is unique for a given username (and not used by any public dashboard), with an optional ",(0,d.jsx)(a.code,{children:"excludeId"})," for updates. Returns a boolean."]}),"\n",(0,d.jsx)(a.h3,{id:"exportwidgetsasjson",children:(0,d.jsx)(a.a,{href:"./export-widgets-as-json",children:(0,d.jsx)(a.code,{children:"exportWidgetsAsJson"})})}),"\n",(0,d.jsx)(a.p,{children:"Exports Dashboard Widgets as raw bytes in JSON format (UTF-8 encoded). Use without parameters to export all widgets or pass a list of IDs or names to export only selected widgets."}),"\n",(0,d.jsx)(a.h3,{id:"exportwidgetsascsv",children:(0,d.jsx)(a.a,{href:"./export-widgets-as-csv",children:(0,d.jsx)(a.code,{children:"exportWidgetsAsCsv"})})}),"\n",(0,d.jsx)(a.p,{children:"Exports Dashboard Widgets as raw bytes in CSV format (UTF-8 encoded). Use without parameters to export all widgets or pass a list of IDs or names to export only selected widgets."}),"\n",(0,d.jsx)(a.h3,{id:"importfromcsv",children:(0,d.jsx)(a.a,{href:"./import-from-csv",children:(0,d.jsx)(a.code,{children:"importFromCsv"})})}),"\n",(0,d.jsx)(a.p,{children:"Imports Dashboard Widgets from a CSV file provided as raw bytes. Returns an ApiResponse with outcome details."}),"\n",(0,d.jsx)(a.h3,{id:"importfromjson",children:(0,d.jsx)(a.a,{href:"./import-from-json",children:(0,d.jsx)(a.code,{children:"importFromJson"})})}),"\n",(0,d.jsx)(a.p,{children:"Imports Dashboard Widgets from a JSON file provided as raw bytes. Returns an ApiResponse with outcome details."})]})}function c(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,d.jsx)(a,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}},28453:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>n});var r=t(96540);const d={},s=r.createContext(d);function i(e){const a=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function n(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),r.createElement(s.Provider,{value:a},e.children)}}}]);