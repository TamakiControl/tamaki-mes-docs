"use strict";(self.webpackChunktamaki_mes_docs=self.webpackChunktamaki_mes_docs||[]).push([[1483],{32759:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>t,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"appendix/script-api/unit-of-measure-script-api/intro","title":"Introduction to Units of Measure API","description":"Overview of functions available in the Units of Measure API.","source":"@site/docs/appendix/script-api/unit-of-measure-script-api/intro.md","sourceDirName":"appendix/script-api/unit-of-measure-script-api","slug":"/appendix/script-api/unit-of-measure-script-api/intro","permalink":"/tamaki-mes-docs/docs/appendix/script-api/unit-of-measure-script-api/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/TamakiControl/tamaki-mes-docs/docs/appendix/script-api/unit-of-measure-script-api/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Introduction to Units of Measure API","description":"Overview of functions available in the Units of Measure API."},"sidebar":"tutorialSidebar","previous":{"title":"findSchedules","permalink":"/tamaki-mes-docs/docs/appendix/script-api/schedule-script-api/find-schedules"},"next":{"title":"newUnitOfMeasure","permalink":"/tamaki-mes-docs/docs/appendix/script-api/unit-of-measure-script-api/new-unit-of-measure"}}');var r=s(74848),o=s(28453);const t={sidebar_position:1,title:"Introduction to Units of Measure API",description:"Overview of functions available in the Units of Measure API."},a="Units of Measure API",d={},u=[{value:"Function List",id:"function-list",level:2},{value:"<code>newUnitOfMeasure</code>",id:"newunitofmeasure",level:3},{value:"<code>saveUnitOfMeasure</code>",id:"saveunitofmeasure",level:3},{value:"<code>doesUnitOfMeasureExist</code>",id:"doesunitofmeasureexist",level:3},{value:"<code>findUnitsOfMeasure</code>",id:"findunitsofmeasure",level:3},{value:"<code>getUnitOfMeasureOrCreateNew</code>",id:"getunitofmeasureorcreatenew",level:3},{value:"<code>getUnitOfMeasure</code>",id:"getunitofmeasure",level:3},{value:"<code>getAllUnitsOfMeasure</code>",id:"getallunitsofmeasure",level:3},{value:"<code>getUnitOfMeasureReferences</code>",id:"getunitofmeasurereferences",level:3},{value:"<code>validateUnitOfMeasure</code>",id:"validateunitofmeasure",level:3},{value:"<code>deleteUnitOfMeasure</code>",id:"deleteunitofmeasure",level:3},{value:"<code>newUnitOfMeasureConversion</code>",id:"newunitofmeasureconversion",level:3},{value:"<code>saveUnitOfMeasureConversion</code>",id:"saveunitofmeasureconversion",level:3},{value:"<code>doesConversionExist</code>",id:"doesconversionexist",level:3},{value:"<code>findUnitOfMeasureConversions</code>",id:"findunitofmeasureconversions",level:3},{value:"<code>getUnitOfMeasureConversion</code>",id:"getunitofmeasureconversion",level:3},{value:"<code>getAllConversions</code>",id:"getallconversions",level:3},{value:"<code>getAllConversionsForMaterial</code>",id:"getallconversionsformaterial",level:3},{value:"<code>getUnitOfMeasureConversionReferences</code>",id:"getunitofmeasureconversionreferences",level:3},{value:"<code>validateUnitOfMeasureConversion</code>",id:"validateunitofmeasureconversion",level:3},{value:"<code>deleteUnitOfMeasureConversion</code>",id:"deleteunitofmeasureconversion",level:3},{value:"<code>addConversion</code>",id:"addconversion",level:3},{value:"<code>getConversionFor</code>",id:"getconversionfor",level:3},{value:"<code>getConversion</code>",id:"getconversion",level:3},{value:"<code>convert</code>",id:"convert",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"units-of-measure-api",children:"Units of Measure API"})}),"\n",(0,r.jsx)(n.p,{children:"Welcome to the Units of Measure API documentation. This API provides a set of functions for managing units of measure and conversions between them. Below is a list of available functions, each with a brief description and a link to its detailed documentation."}),"\n",(0,r.jsx)(n.h2,{id:"function-list",children:"Function List"}),"\n",(0,r.jsx)(n.h3,{id:"newunitofmeasure",children:(0,r.jsx)(n.a,{href:"./new-unit-of-measure",children:(0,r.jsx)(n.code,{children:"newUnitOfMeasure"})})}),"\n",(0,r.jsxs)(n.p,{children:["Generates an empty non-persisted ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure",children:"Units Of Measure"})," object to provide the structure required by the API\nto save a new record into the database. This method must be combined with the ",(0,r.jsx)(n.a,{href:"./save-unit-of-measure",children:"saveUnitOfMeasure"})," method in order to persist the record. Returns a JSON representation of the newly created unit of measure object."]}),"\n",(0,r.jsx)(n.h3,{id:"saveunitofmeasure",children:(0,r.jsx)(n.a,{href:"./save-unit-of-measure",children:(0,r.jsx)(n.code,{children:"saveUnitOfMeasure"})})}),"\n",(0,r.jsxs)(n.p,{children:["Creates or updates a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure",children:"Units Of Measure"})," record in the system based on the provided parameters. Returns a JSON representation of the saved unit of measure."]}),"\n",(0,r.jsx)(n.h3,{id:"doesunitofmeasureexist",children:(0,r.jsx)(n.a,{href:"./does-unit-of-measure-exist",children:(0,r.jsx)(n.code,{children:"doesUnitOfMeasureExist"})})}),"\n",(0,r.jsxs)(n.p,{children:["Checks if a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure",children:"Units Of Measure"})," object with the given ID or name exists. Returns a boolean indicating whether the unit of measure exists."]}),"\n",(0,r.jsx)(n.h3,{id:"findunitsofmeasure",children:(0,r.jsx)(n.a,{href:"./find-units-of-measure",children:(0,r.jsx)(n.code,{children:"findUnitsOfMeasure"})})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieves ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure",children:"Units Of Measure"})," records based on the specified pagination, sort, and column constraint parameters. Returns a Query Result object."]}),"\n",(0,r.jsx)(n.h3,{id:"getunitofmeasureorcreatenew",children:(0,r.jsx)(n.a,{href:"./get-unit-of-measure-or-create-new",children:(0,r.jsx)(n.code,{children:"getUnitOfMeasureOrCreateNew"})})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieves a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure",children:"Units Of Measure"})," record if an existing unit of measure exists with the specified name and symbol.\nOtherwise, creates a new ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure",children:"Units Of Measure"})," record with the specified name and symbol. Returns a JSON representation of the unit of measure property."]}),"\n",(0,r.jsx)(n.h3,{id:"getunitofmeasure",children:(0,r.jsx)(n.a,{href:"./get-unit-of-measure",children:(0,r.jsx)(n.code,{children:"getUnitOfMeasure"})})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieves a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure",children:"Units Of Measure"})," record by its ID or name. Returns a JSON representation of the unit of measure. Returns nothing if no unit of measure is found."]}),"\n",(0,r.jsx)(n.h3,{id:"getallunitsofmeasure",children:(0,r.jsx)(n.a,{href:"./get-all-units-of-measure",children:(0,r.jsx)(n.code,{children:"getAllUnitsOfMeasure"})})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieves a list of all ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure",children:"Units Of Measure"})," records in the system. Returns a list of JSON objects representing all units of measure."]}),"\n",(0,r.jsx)(n.h3,{id:"getunitofmeasurereferences",children:(0,r.jsx)(n.a,{href:"./get-unit-of-measure-references",children:(0,r.jsx)(n.code,{children:"getUnitOfMeasureReferences"})})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieves a list of references to a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure",children:"Units Of Measure"})," record by its ID. Returns a list of JSON objects."]}),"\n",(0,r.jsx)(n.h3,{id:"validateunitofmeasure",children:(0,r.jsx)(n.a,{href:"./validate-unit-of-measure",children:(0,r.jsx)(n.code,{children:"validateUnitOfMeasure"})})}),"\n",(0,r.jsxs)(n.p,{children:["Validates the specified parameters for a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure",children:"Units Of Measure"})," record and returns any validation errors.\nThis only checks if the unit of measure object can be saved based on the attributes given. Returns a JSON object where keys are field names and values are lists of validation violation messages."]}),"\n",(0,r.jsx)(n.h3,{id:"deleteunitofmeasure",children:(0,r.jsx)(n.a,{href:"./delete-unit-of-measure",children:(0,r.jsx)(n.code,{children:"deleteUnitOfMeasure"})})}),"\n",(0,r.jsxs)(n.p,{children:["Deletes a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure",children:"Units Of Measure"})," record by its ID.\nThis cannot delete a unit of measure with references to it. If successful, an ApiResponse Object is returned with the success bool set True."]}),"\n",(0,r.jsx)(n.h3,{id:"newunitofmeasureconversion",children:(0,r.jsx)(n.a,{href:"./new-unit-of-measure-conversion",children:(0,r.jsx)(n.code,{children:"newUnitOfMeasureConversion"})})}),"\n",(0,r.jsxs)(n.p,{children:["Generates an empty non-persisted ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure-conversion",children:"Unit Of Measure Conversions"})," object to provide the structure required by the API\nto save a new record into the database. This method must be combined with the ",(0,r.jsx)(n.a,{href:"./save-unit-of-measure-conversion",children:"saveUnitOfMeasureConversion"})," method in order to persist the record. Returns a JSON representation of the newly created unit of measure conversion object."]}),"\n",(0,r.jsx)(n.h3,{id:"saveunitofmeasureconversion",children:(0,r.jsx)(n.a,{href:"./save-unit-of-measure-conversion",children:(0,r.jsx)(n.code,{children:"saveUnitOfMeasureConversion"})})}),"\n",(0,r.jsxs)(n.p,{children:["Creates or updates a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure-conversion",children:"Unit Of Measure Conversions"})," record in the system based on the provided parameters. Returns a JSON representation of the saved unit of measure conversion."]}),"\n",(0,r.jsx)(n.h3,{id:"doesconversionexist",children:(0,r.jsx)(n.a,{href:"./does-conversion-exist",children:(0,r.jsx)(n.code,{children:"doesConversionExist"})})}),"\n",(0,r.jsxs)(n.p,{children:["Checks if a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure-conversion",children:"Unit Of Measure Conversions"})," object with the given parameters exists. Returns a boolean indicating whether the unit of measure conversion exists."]}),"\n",(0,r.jsx)(n.h3,{id:"findunitofmeasureconversions",children:(0,r.jsx)(n.a,{href:"./find-unit-of-measure-conversions",children:(0,r.jsx)(n.code,{children:"findUnitOfMeasureConversions"})})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieves ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure-conversion",children:"Unit Of Measure Conversions"})," records based on the specified pagination, sort, and column constraint parameters. Returns a Query Result object."]}),"\n",(0,r.jsx)(n.h3,{id:"getunitofmeasureconversion",children:(0,r.jsx)(n.a,{href:"./get-unit-of-measure-conversion",children:(0,r.jsx)(n.code,{children:"getUnitOfMeasureConversion"})})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieves a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure-conversion",children:"Unit Of Measure Conversions"})," record by its ID. Returns a JSON representation of the unit of measure conversion assigned to value. Returns value is null if no unit of measure conversion is found."]}),"\n",(0,r.jsx)(n.h3,{id:"getallconversions",children:(0,r.jsx)(n.a,{href:"./get-all-conversions",children:(0,r.jsx)(n.code,{children:"getAllConversions"})})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieves a list of all ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure-conversion",children:"Unit Of Measure Conversions"})," records in the system. Returns a list of JSON objects representing all unit of measure conversions."]}),"\n",(0,r.jsx)(n.h3,{id:"getallconversionsformaterial",children:(0,r.jsx)(n.a,{href:"./get-all-conversions-for-material",children:(0,r.jsx)(n.code,{children:"getAllConversionsForMaterial"})})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieves a list of all ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure-conversion",children:"Unit Of Measure Conversions"})," records in the system for a material. Returns a list of JSON objects representing all unit of measure conversions for a material."]}),"\n",(0,r.jsx)(n.h3,{id:"getunitofmeasureconversionreferences",children:(0,r.jsx)(n.a,{href:"./get-unit-of-measure-conversion-references",children:(0,r.jsx)(n.code,{children:"getUnitOfMeasureConversionReferences"})})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieves a list of references to a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure-conversion",children:"Unit Of Measure Conversions"})," record by its ID. Returns a list of JSON objects."]}),"\n",(0,r.jsx)(n.h3,{id:"validateunitofmeasureconversion",children:(0,r.jsx)(n.a,{href:"./validate-unit-of-measure-conversion",children:(0,r.jsx)(n.code,{children:"validateUnitOfMeasureConversion"})})}),"\n",(0,r.jsxs)(n.p,{children:["Validates the specified parameters for a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure-conversion",children:"Unit Of Measure Conversions"})," record and returns any validation errors.\nThis only checks if the unit of measure conversion object can be saved based on the attributes given. Returns a JSON object where keys are field names and values are lists of validation violation messages."]}),"\n",(0,r.jsx)(n.h3,{id:"deleteunitofmeasureconversion",children:(0,r.jsx)(n.a,{href:"./delete-unit-of-measure-conversion",children:(0,r.jsx)(n.code,{children:"deleteUnitOfMeasureConversion"})})}),"\n",(0,r.jsxs)(n.p,{children:["Deletes a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure-conversion",children:"Unit Of Measure Conversions"})," record by its ID.\nThis cannot delete a unit of measure conversion with references to it. If successful, an ApiResponse Object is returned with the success bool set True."]}),"\n",(0,r.jsx)(n.h3,{id:"addconversion",children:(0,r.jsx)(n.a,{href:"./add-conversion",children:(0,r.jsx)(n.code,{children:"addConversion"})})}),"\n",(0,r.jsxs)(n.p,{children:["Adds a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure-conversion",children:"Unit Of Measure Conversions"})," record from one unit of measure to another for the specified material with the specified conversion factor. Returns a JSON representation of the added unit of measure conversion object."]}),"\n",(0,r.jsx)(n.h3,{id:"getconversionfor",children:(0,r.jsx)(n.a,{href:"./get-conversion-for",children:(0,r.jsx)(n.code,{children:"getConversionFor"})})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieves a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure-conversion",children:"Unit Of Measure Conversions"})," record by the given to and from unit of measure and material ID. Returns a JSON representation of the unit of measure conversion. Returns nothing if no unit of measure conversion is found."]}),"\n",(0,r.jsx)(n.h3,{id:"getconversion",children:(0,r.jsx)(n.a,{href:"./get-conversion",children:(0,r.jsx)(n.code,{children:"getConversion"})})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieves a ",(0,r.jsx)(n.a,{href:"../../data-model/utility-models/unit-of-measure-model/unit-of-measure-conversion",children:"Unit Of Measure Conversions"})," record by its ID. Returns a JSON representation of the unit of measure conversion. Returns nothing if no unit of measure conversion is found."]}),"\n",(0,r.jsx)(n.h3,{id:"convert",children:(0,r.jsx)(n.a,{href:"./convert",children:(0,r.jsx)(n.code,{children:"convert"})})}),"\n",(0,r.jsx)(n.p,{children:"Converts the specified amount from one unit of measure to the other. Returns the amount converted."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"Explore each function\u2019s documentation for detailed usage examples and additional information."})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(96540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);